@PART[*]:HAS[@MODULE[ModuleCommand]]
{
  // Allow unmanned pods 
  @MODULE[ModuleCommand]
  {
    %minimumCrew = 0
  }

  // All Module SAS
  %MODULE[ModuleSAS]
  {
    %SASServiceLevel = 3
  }

  // All modules internal antenna equivalent of COM 16-S
  %MODULE[ModuleDataTransmitter]
	{
	   %antennaType = DIRECT
	   %packetInterval = 0.6
	   %packetSize = 2
	   %packetResourceCost = 12.0
	   %requiredResource = ElectricCharge
	   %antennaPower = 500000
	}
}

@PART[*]:HAS[@MODULE[ModuleCommand]]:FOR[RemoteTech]
{
	%MODULE[ModuleRTAntenna] {
		%IsRTActive = true
		%Mode0OmniRange = 0
		%Mode1OmniRange = 1500000
		%EnergyCost = 0.02
		
		%TRANSMITTER {
			%PacketInterval = 0.3
			%PacketSize = 2
			%PacketResourceCost = 15.0
		}
	}
  
  %MODULE[ModuleSPU] {}
}

@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[MechJeb2]
{
  %MODULE[MechJebCore]
  {
    %MechJebLocalSettings
    {
      %MechJebModuleCustomWindowEditor { %unlockTechs = flightControl }
      %MechJebModuleSmartASS { %unlockTechs = flightControl }
      %MechJebModuleManeuverPlanner { %unlockTechs = advFlightControl }
      %MechJebModuleNodeEditor { %unlockTechs = advFlightControl }
      %MechJebModuleTranslatron { %unlockTechs = advFlightControl }
      %MechJebModuleWarpHelper { %unlockTechs = advFlightControl }
      %MechJebModuleAttitudeAdjustment { %unlockTechs = advFlightControl }
      %MechJebModuleThrustWindow { %unlockTechs = advFlightControl }
      %MechJebModuleRCSBalancerWindow { %unlockTechs = advFlightControl }
      %MechJebModuleRoverWindow { %unlockTechs = fieldScience }
      %MechJebModuleAscentGuidance { %unlockTechs = unmannedTech }
      %MechJebModuleLandingGuidance { %unlockTechs = unmannedTech }
      %MechJebModuleSpaceplaneGuidance { %unlockTechs = unmannedTech }
      %MechJebModuleDockingGuidance { %unlockTechs = advUnmanned }
      %MechJebModuleRendezvousAutopilotWindow { %unlockTechs = advUnmanned }
      %MechJebModuleRendezvousGuidance { %unlockTechs = advUnmanned }
    }
  }

  %MODULE[MechJebCore]
  {
    %MechJebLocalSettings
    {
      %MechJebModuleCustomWindowEditor { %unlockTechs = start }
      %MechJebModuleSmartASS { %unlockTechs = start }
      %MechJebModuleManeuverPlanner { %unlockTechs = start }
      %MechJebModuleNodeEditor { %unlockTechs = start }
      %MechJebModuleTranslatron { %unlockTechs = start }
      %MechJebModuleWarpHelper { %unlockTechs = start }
      %MechJebModuleAttitudeAdjustment { %unlockTechs = start }
      %MechJebModuleThrustWindow { %unlockTechs = start }
      %MechJebModuleRCSBalancerWindow { %unlockTechs = start }
      %MechJebModuleRoverWindow { %unlockTechs = start }
      %MechJebModuleAscentGuidance { %unlockTechs = start }
      %MechJebModuleLandingGuidance { %unlockTechs = start }
      %MechJebModuleSpaceplaneGuidance { %unlockTechs = start }
      %MechJebModuleDockingGuidance { %unlockTechs = start }
      %MechJebModuleRendezvousAutopilotWindow { %unlockTechs = start }
      %MechJebModuleRendezvousGuidance { %unlockTechs = start }
    }
  }
}

@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[KerbalEngineer]
{
	%MODULE[FlightEngineerModule] {}
}

@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[kOS]
{
	%MODULE[kOSProcessor]
	{
		%diskSpace = 10000000
	}
}

// Optional sensors for kOS
@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[kOS]
{
  MODULE
	{
		name = ModuleEnviroSensor
		sensorType = ACC
	}

  MODULE
	{
		name = ModuleEnviroSensor
		sensorType = PRES
	}

  MODULE
	{
		name = ModuleEnviroSensor
		sensorType = GRAV
	}

  MODULE
	{
		name = ModuleEnviroSensor
		sensorType = TEMP
	}
}
